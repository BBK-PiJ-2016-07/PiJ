public class Classics{		public static void main(String[] args){						Classics printResult = new Classics();		int number = Integer.parseInt(args[0]);				int result = printResult.recursiveFectorial(number);		System.out.println("Recursive Fectorial of number [" + number + "] is : " + result);		result = printResult.iterativeFectorial(number);		System.out.println("Iterative Fectorial of number [" + number + "] is : " + result);		System.out.println("   ");		result = printResult.recursiveFibonacci(number);		System.out.println("Recursive Fibonacci calculation of number [" + number + "] is : " + result);		result = printResult.iterativeFibonacci(number);		System.out.println("Iterative Fibonacci calculation of number [" + number + "] is : " + result);	}	public int recursiveFectorial(int number){		if(number == 1){			return 1;		} else {			int result = number * recursiveFectorial(number - 1);			return result;		}	}	public int iterativeFectorial(int number){		if(number == 1){			return 1;		} else {		int result = 1;			for(int i = 2; i <= number; i++){			result = result * i;		}		return result;		}	}	public int recursiveFibonacci(int number){		if ((number == 1) || (number == 2)) {          return 1;        } else {		int result = recursiveFibonacci(number - 1) + recursiveFibonacci(number - 2); // method calls itself            return result;        }	}	public int iterativeFibonacci(int number){		if ((number == 1) || (number == 2)) {          return 1;        } else {		int prevFeb = 1;		int currentFeb = 1;		int nextFeb = 1;		for(int i = 3; i <= number; i++){			nextFeb = prevFeb + currentFeb;			prevFeb = currentFeb;			currentFeb = nextFeb;		}        return currentFeb;		}	}/* 	public int findmovecount(int disccount){		return 1 + 2 * findmovecount();	}*/}